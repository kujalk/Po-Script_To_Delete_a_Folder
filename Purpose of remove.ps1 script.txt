Note - The script explained given below is suitable only for the scenario I explained only. But my aim of this post is to
show you all, how you all can play with different folder path by traversing it. I have used 2 loop structures in this script. By studying 
the scenario and the script, you all can develop some idea to create your own script according to your needs, for example deleting/creating/renaming folder
structure across different network paths.

Story -
Recently, I was given a task to remove certain folders ("cache" folders) under some user profiles. For example
the path in the network is like this,
\\Training\Files\John\Software\Purpose\Train1\cache
\\Training\Files\John\Software\Purpose\Train2\cache

The folder path upto all user profiles are same, but sub directories may or may not present inside each user profile.
So the first challenge is to check whether the particular user profile has that certain sub directory path.
Eg - "\Software\purpose\"

After reaching that sub directory path, there are multiple folders named "Trainx" where is the digit and the cache folders
are present inside it (some time not), For example,
\Train1\cache
\Train2\cache
\Train3\ (Under Train3 folder there is no "cache" folder. Therefore we have to check this before deleting that folder inside it)

So, its essential to remove all those cache folders under each user profile. Meaning, need to remove all cache folders from 
user "John"
\\Training\Files\John\Software\Purpose\Train1\cache
\\Training\Files\John\Software\Purpose\Train2\cache
\\Training\Files\John\Software\Purpose\Train3\

So, I have written a powershell script (remove.ps1) for this purpose.

Before testing this script in the network path, I have checked my script in my local machine, by creating same folder structure, for different
conditions.

For example, I have created a folder structure like this in my local machine,
E:\Training\Files\John\Software\Purpose\Train1\cache ("cache" folder is there)
E:\Training\Files\John\Software\Purpose\Train2\cache ("cache" folder is there)
E:\Training\Files\John\Software\Purpose\Train3 (No "cache" folder is there)
E:\Training\Files\Arun\Software\Purpose\Train1\cache ("cache" folder is there)
E:\Training\Files\Arun\Software\Purpose\Train2\cache ("cache" folder is there)
E:\Training\Files\William (No sub folder "\Software\Purpose" is there)
E:\Training\Files\Steve\Software\Purpose (No "Train" folder is there)

Just dive into the script.

It's a best practise to log all the activities inside the script. So, I have used a function called "timestamp" to log the
activity with time period.

function timestamp ($message)
{
$date=Get-Date
"$date : $message" >> $log
}

$log is the place where the user prefers to keep his log file in .txt format (Eg - D:\Logs\RemoveLog.txt)

Since the script needs to access different path on its way, it is essential that the user who initiate the script must hold the
privileges rights to that path. In order to achieve the, right click the power shell window by pressing shift key and select
"Run As Different User" and provide the valid credentials.

In order to remember this, I have displayed a message to users,
$reply= Read-Host "`n`nDid you use your Privilege Account to run this script`n  If yes press 'y' if not press 'n'"
If user, press "n" the script will terminate immediately.

Next step is to, move to the common path "E:\Training\Files", In order to that, I used
$path1="E:\Training\Files\"
set-location $path1

After reaching this location, there are different user profiles will be found. In order to loop them through all,  
$profiles = Get-ChildItem | where {$_.Attributes -match 'Directory'}| select "Name" -ExpandProperty "Name"
(we ensure whether all are directories by using  where {$_.Attributes -match 'Directory'})

Then we iterate through each user profile by using,
foreach ($userpro in $profiles)
{
//other parts
}

After moving our location inside the user profile, we have to check whether the path "\Software\Purpose\" is available for that user 
by using "Test-Path"

if(Test-Path ".\Software\Purpose\")
{
#Moving inside the user profile
cd ".\Software\Purpose\"
}
		
Then, as I said, earlier there are possibilities for the presense of multiple "Trainx" folders inside that location. 
Sometime "Trainx" folder also not found inside the location. So we have check for that,
$subfol = @(Get-ChildItem | where {$_.Attributes -match 'Directory'}|select "Name" -ExpandProperty "Name")
if ($subfol.length -eq 0)
{
timestamp  "<<Info>> : No any 'Trainx' folder under for $userpro"
}

If there are any, Trainx folders found inside that location, then we have to loop them through all to reach the "cache" folder,
then we can delete that folder. Sometime "cache" folder might not present inside the "Trainx" folder. Therefore we have check for
"cache" folder before delete it. 

foreach ($tem in $subfol)
{
cd "$path1\$userpro\Software\Purpose\$tem"
if(Test-Path ".\cache")
{
####Remove cache folder######
Remove-Item "cache" -recurse -confirm:$false
}

You can find the sample script "remove.ps1" as given below.
To execute the script in powershell use the following command, "./remove.ps1" after moving to the directory 
location where you have saved your script.

Note - When providing the location to store log file, just mention the path without any quotes.

